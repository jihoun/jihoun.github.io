{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js","webpack:///node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js","webpack:///src/app/pigs/detail/pig-detail.component.ts","webpack:///src/app/pigs/detail/pig-detail.component.html","webpack:///src/app/pigs/list/pig-list.component.ts","webpack:///src/app/pigs/list/pig-list.component.html","webpack:///src/app/pigs/pig.model.ts","webpack:///src/app/pigs/pigs.component.ts","webpack:///src/app/pigs/pigs.component.html","webpack:///src/app/pigs/pigs.module.ts","webpack:///src/app/pigs/pigs.service.ts"],"names":["listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","info","get","subject","asObservable","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ctorParameters","type","ɵprov","factory","token","providedIn","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","subscribe","emit","CdkAutofill_Factory","ɵdir","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_document","_textareaElement","nativeElement","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","resizeToFitContent","window","_getWindow","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","_setMinHeight","_setMaxHeight","force","_cacheTextareaLineHeight","textarea","value","_minRows","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","doc","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","activeElement","setSelectionRange","_maxRows","reset","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","decorators","host","TextFieldModule","ɵmod","ɵinj","TextFieldModule_Factory","imports","ngJitMode","declarations","exports","HttpHandler","HttpBackend","Update","HttpHeaders","headers","normalizedNames","lazyUpdate","lazyInit","split","line","index","indexOf","name","slice","key","toLowerCase","trim","maybeSetNormalizedName","has","push","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","toDelete","existing","filter","fn","HttpParameterCodec","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","map","params","param","eqIdx","decodeKey","decodeValue","val","list","v","encodeURIComponent","replace","Update$1","HttpParamsOptions","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","eKey","encodeKey","encodeValue","join","idx","splice","HttpRequestInit","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","toString","qIdx","sep","JSON","stringify","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpProgressEvent","HttpDownloadProgressEvent","HttpUploadProgressEvent","HttpSentEvent","HttpUserEvent","HttpJsonParseError","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","HttpResponse","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","handle","res$","request","callbackParam","append","HttpClient_Factory","HttpInterceptor","HttpInterceptorHandler","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","observer","callback","nextCallback","node","createElement","src","finished","cancelled","data","cleanup","onLoad","onError","JsonpClientBackend_Factory","JsonpInterceptor","jsonp","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","XMLHttpRequest","BrowserXhr_Factory","PartialResponse","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfCookieExtractor_Factory","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","HttpClientXsrfModule_Factory","useExisting","multi","HttpClientModule","HttpClientModule_Factory","withOptions","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","_c0","getMatIconNameNotFoundError","iconName","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","getMatIconFailedToSanitizeLiteralError","literal","IconOptions","SvgIconConfig","nodeName","svgElement","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","alias","className","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","svg","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","clear","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","handleError","console","foundIcon","i","_extractSvgIconFromSet","_fetchUrl","svgText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","removeAttribute","_toSvgElement","str","div","innerHTML","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","inProgressFetch","configNamespace","MatIconRegistry_Factory","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","deps","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","MatIconLocation","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","parts","changes","svgIconChanges","svgIcon","_splitIconName","getNamedSvgIcon","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","inline","_fontSet","_cleanupFontValue","_fontIcon","MatIcon_Factory","ɵcmp","hostVars","MatIcon_HostBindings","color","features","ngContentSelectors","decls","vars","template","MatIcon_Template","styles","encapsulation","changeDetection","None","OnPush","MatIconModule","MatIconModule_Factory","MatTextareaAutosize","MatTextareaAutosize_Factory","ɵMatTextareaAutosize_BaseFactory","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","getMatInputUnsupportedTypeError","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","inputValueAccessor","ngZone","_uid","_isServer","_isNativeSelect","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","_inputValueAccessor","_previousNativeValue","id","IOS","el","multiple","updateErrorState","_dirtyCheckNativeValue","focus","isFocused","readonly","newValue","validity","badInput","ids","_ariaDescribedby","disabled","_id","_validateType","_isTextarea","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","MatInput_Factory","MatInput_HostBindings","MatInput_blur_HostBindingHandler","_focusChanged","MatInput_focus_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","required","errorState","errorStateMatcher","MatInputModule","MatInputModule_Factory","PigDetailComponent","templateUrl","styleUrls","PigListComponent","pigsService","pigs$","getPigs","Gender","PigsComponent","routes","component","children","redirectTo","PigsModule","forChild","PigsService","pigs","birth","Date","gender","female","male","pig","find","p"],"mappings":"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","file":"pigs-pigs-module-es5.js","sourcesContent":["import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/autofill.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        /** @type {?} */\n        const result = new Subject();\n        /** @type {?} */\n        const cssClass = 'cdk-text-field-autofilled';\n        /** @type {?} */\n        const listener = (/** @type {?} */ (((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: true })));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: false })));\n            }\n        }))));\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        }));\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: (/**\n             * @return {?}\n             */\n            () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            })\n        });\n        return result.asObservable();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    stopMonitoring(elementOrRef) {\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._monitoredElements.forEach((/**\n         * @param {?} _info\n         * @param {?} element\n         * @return {?}\n         */\n        (_info, element) => this.stopMonitoring(element)));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n/** @nocollapse */\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ AutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._monitoredElements;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._ngZone;\n}\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nclass CdkAutofill {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _autofillMonitor\n     */\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this.cdkAutofill.emit(event)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\n/** @nocollapse */\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\nif (false) {\n    /**\n     * Emits when the autofill state of the element changes.\n     * @type {?}\n     */\n    CdkAutofill.prototype.cdkAutofill;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAutofill.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAutofill.prototype._autofillMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/autosize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nclass CdkTextareaAutosize {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?=} document\n     */\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._document = document;\n        this._textareaElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Minimum amount of rows in the textarea.\n     * @return {?}\n     */\n    get minRows() { return this._minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n    get maxRows() { return this._maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    _setMinHeight() {\n        /** @type {?} */\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    _setMaxHeight() {\n        /** @type {?} */\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => this.resizeToFitContent(true)));\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @private\n     * @return {?}\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        /** @type {?} */\n        let textareaClone = (/** @type {?} */ (this._textareaElement.cloneNode(false)));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        (/** @type {?} */ (this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        (/** @type {?} */ (this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        /** @type {?} */\n        const textarea = (/** @type {?} */ (this._elementRef.nativeElement));\n        /** @type {?} */\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        /** @type {?} */\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        /** @type {?} */\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n            else {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n        }));\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     * @return {?}\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n    _getDocument() {\n        return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        /** @type {?} */\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     * @private\n     * @param {?} textarea\n     * @return {?}\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        /** @type {?} */\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\n/** @nocollapse */\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_minRows;\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_maxRows;\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_enabled;\n    /**\n     * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._previousValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._initialHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._minRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._maxRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._enabled;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._previousMinRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._textareaElement;\n    /**\n     * Cached height of a textarea with a single row.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._cachedLineHeight;\n    /**\n     * Used to reference correct document/window\n     * @type {?}\n     * @protected\n     */\n    CdkTextareaAutosize.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/text-field-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); }, imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill,\n        CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill,\n        CdkTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","/**\n * @license Angular v9.1.0\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/backend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/headers.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the values.\n     * @param {?} value The value to append.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/params.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) { return standardEncoding(value); }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) { return decodeURIComponent(key); }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) { return decodeURIComponent(value); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {\n    /** @type {?} */\n    Update$1.prototype.param;\n    /** @type {?|undefined} */\n    Update$1.prototype.value;\n    /** @type {?} */\n    Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the parameters.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter((/**\n         * @param {?} param\n         * @return {?}\n         */\n        param => param !== ''))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.map;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.encoder;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.updates;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/request.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params, headers, reportProgress, responseType, withCredentials,\n        });\n    }\n}\nif (false) {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n    /** @type {?} */\n    HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/response.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message =\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/client.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/interceptor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    HttpInterceptor.prototype.intercept = function (req, next) { };\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.next;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/jsonp.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK', url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error', url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.callbackMap;\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/xhr.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/xsrf.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.chain;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.backend;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); }, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); }, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); }, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\n\n//# sourceMappingURL=http.js.map","import { SecurityContext, Injectable, Optional, Inject, ErrorHandler, ɵɵdefineInjectable, ɵɵinject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { of, throwError, forkJoin } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Options that can be used to configure how an icon or the icons in an icon set are presented.\n * @record\n */\nfunction IconOptions() { }\nif (false) {\n    /**\n     * View box to set on the icon.\n     * @type {?|undefined}\n     */\n    IconOptions.prototype.viewBox;\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     * @param {?=} options\n     */\n    constructor(data, options) {\n        this.options = options;\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!((/** @type {?} */ (data))).nodeName) {\n            this.svgElement = (/** @type {?} */ (data));\n        }\n        else {\n            this.url = (/** @type {?} */ (data));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    SvgIconConfig.prototype.url;\n    /** @type {?} */\n    SvgIconConfig.prototype.svgElement;\n    /** @type {?} */\n    SvgIconConfig.prototype.options;\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     * @param {?=} _errorHandler\n     */\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIcon(iconName, url, options) {\n        return (/** @type {?} */ (this)).addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._createSvgElementForSingleIcon(sanitizedLiteral, options);\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSet(url, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._svgElementFromString(sanitizedLiteral);\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        (/** @type {?} */ (this))._fontCssClassesByAlias.set(alias, className);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n    setDefaultFontSetClass(className) {\n        (/** @type {?} */ (this))._defaultFontSetClass = className;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => this._cachedIconsByUrl.set((/** @type {?} */ (url)), svg))), map((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => cloneSvg(svg))));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => config.svgElement = svg)), map((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => cloneSvg(svg))));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => !iconSetConfig.svgElement))\n            .map((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                /** @type {?} */\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                // @breaking-change 9.0.0 _errorHandler parameter to be made required\n                if (this._errorHandler) {\n                    this._errorHandler.handleError(new Error(errorMessage));\n                }\n                else {\n                    console.error(errorMessage);\n                }\n                return of(null);\n            })));\n        }));\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        })));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => this._createSvgElementForSingleIcon(svgText, config.options))));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        })));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @param {?=} options\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText, options) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg, options);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @param {?=} options\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        /** @type {?} */\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        /** @type {?} */\n        const iconElement = (/** @type {?} */ (iconSource.cloneNode(true)));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes((/** @type {?} */ (iconElement)), options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = (/** @type {?} */ (div.querySelector('svg')));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        /** @type {?} */\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @param {?=} options\n     * @return {?}\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize((/**\n         * @return {?}\n         */\n        () => this._inProgressUrlFetches.delete(url))), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        (/** @type {?} */ (this))._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = (/** @type {?} */ (this))._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            (/** @type {?} */ (this))._iconSetConfigs.set(namespace, [config]);\n        }\n        return (/** @type {?} */ (this));\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler, 8)); };\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ MatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._document;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._svgIconConfigs;\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._iconSetConfigs;\n    /**\n     * Cache for icons loaded by direct URLs.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._cachedIconsByUrl;\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._inProgressUrlFetches;\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._fontCssClassesByAlias;\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._defaultFontSetClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._httpClient;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._sanitizer;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._errorHandler;\n}\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), ErrorHandler],\n        [new Optional(), (/** @type {?} */ (DOCUMENT))],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (/** @type {?} */ (svg.cloneNode(true)));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatIconBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * Stubbed out location for `MatIcon`.\n * \\@docs-private\n * @record\n */\nfunction MatIconLocation() { }\nif (false) {\n    /** @type {?} */\n    MatIconLocation.prototype.getPathname;\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = /**\n * @param {?} attr\n * @return {?}\n */\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\nconst funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     * @param {?=} _errorHandler\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return (/** @type {?} */ (parts));\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        /** @type {?} */\n        const svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe((/**\n                 * @param {?} svg\n                 * @return {?}\n                 */\n                svg => this._setSvgElement(svg)), (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    /** @type {?} */\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n                    if (this._errorHandler) {\n                        this._errorHandler.handleError(new Error(errorMessage));\n                    }\n                    else {\n                        console.error(errorMessage);\n                    }\n                }));\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        /** @type {?} */\n        const styleTags = (/** @type {?} */ (svg.querySelectorAll('style')));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((/**\n             * @param {?} attrs\n             * @param {?} element\n             * @return {?}\n             */\n            (attrs, element) => {\n                attrs.forEach((/**\n                 * @param {?} attr\n                 * @return {?}\n                 */\n                attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                }));\n            }));\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    (/** @type {?} */ (attributes)).push({ name: attr, value: match[1] });\n                }\n            }));\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler, 8)); };\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 4, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler, decorators: [{\n                type: Optional\n            }] }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatIcon.ngAcceptInputType_inline;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._inline;\n    /**\n     * Name of the icon in the SVG icon set.\n     * @type {?}\n     */\n    MatIcon.prototype.svgIcon;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._fontSet;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._fontIcon;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousFontSetClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousFontIconClass;\n    /**\n     * Keeps track of the current page path.\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousPath;\n    /**\n     * Keeps track of the elements and attributes that we've prefixed with the current path.\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._elementsWithExternalReferences;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._iconRegistry;\n    /**\n     * @deprecated `location` parameter to be made required.\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._location;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._errorHandler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconModule_Factory(t) { return new (t || MatIconModule)(); }, imports: [[MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n\n//# sourceMappingURL=icon.js.map","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/autosize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    /**\n     * @return {?}\n     */\n    get matAutosizeMinRows() { return this.minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosizeMaxRows() { return this.maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosize(value) { this.enabled = value; }\n    /**\n     * @return {?}\n     */\n    get matTextareaAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-value-accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n * @type {?}\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n/** @type {?} */\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n/** @type {?} */\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/**\n * \\@docs-private\n */\nclass MatInputBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatInputBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatInputBase.prototype._parentForm;\n    /** @type {?} */\n    MatInputBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInputBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nclass MatInput extends _MatInputMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} ngControl\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} inputValueAccessor\n     * @param {?} _autofillMonitor\n     * @param {?} ngZone\n     */\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Whether the component is being rendered on the server.\n         */\n        this._isServer = false;\n        /**\n         * Whether the component is a native html select.\n         */\n        this._isNativeSelect = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => getSupportedInputTypes().has(t)));\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                _elementRef.nativeElement.addEventListener('keyup', (/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    /** @type {?} */\n                    let el = (/** @type {?} */ (event.target));\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                }));\n            }));\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n        if (this._isNativeSelect) {\n            this.controlType = ((/** @type {?} */ (element))).multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Input type of the element.\n     * @return {?}\n     */\n    get type() { return this._type; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n            ((/** @type {?} */ (this._elementRef.nativeElement))).type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._inputValueAccessor.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Whether the element is readonly.\n     * @return {?}\n     */\n    get readonly() { return this._readonly; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /**\n     * Determines if the component host is a textarea.\n     * @return {?}\n     */\n    _isTextarea() {\n        return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    }\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    _dirtyCheckNativeValue() {\n        /** @type {?} */\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Make sure the input is a supported type.\n     * @protected\n     * @return {?}\n     */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @protected\n     * @return {?}\n     */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @protected\n     * @return {?}\n     */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        /** @type {?} */\n        let validity = ((/** @type {?} */ (this._elementRef.nativeElement))).validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            /** @type {?} */\n            const selectElement = (/** @type {?} */ (this._elementRef.nativeElement));\n            /** @type {?} */\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 10, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\" }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * \\@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    '[attr.placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()',\n                    '(blur)': '_focusChanged(false)',\n                    '(focus)': '_focusChanged(true)',\n                    '(input)': '_onInput()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatInput.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_readonly;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_required;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._uid;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._previousNativeValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._inputValueAccessor;\n    /**\n     * The aria-describedby attribute on the input for improved a11y.\n     * @type {?}\n     */\n    MatInput.prototype._ariaDescribedby;\n    /**\n     * Whether the component is being rendered on the server.\n     * @type {?}\n     */\n    MatInput.prototype._isServer;\n    /**\n     * Whether the component is a native html select.\n     * @type {?}\n     */\n    MatInput.prototype._isNativeSelect;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.focused;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.stateChanges;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.controlType;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.autofilled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._disabled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._id;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._type;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatInput.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._readonly;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._neverEmptyInputTypes;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._platform;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.ngControl;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._autofillMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatInputModule {\n}\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatInputModule_Factory(t) { return new (t || MatInputModule)(); }, providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n        ],\n        TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput,\n        MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput,\n        MatTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pig-detail',\n  templateUrl: './pig-detail.component.html',\n  styleUrls: ['./pig-detail.component.scss']\n})\nexport class PigDetailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>Fertilization date (교배일)</p>\n<p>Fertilization success (착상성공일)</p>\n<p>Expected date (분만예정일) Fertilization + 115 days</p>\n<p>\n  Birth date (분만일) Number of baby pig(총산자수)\n</p>\n<p>\n  Number of baby pigs being breastfeed (포유개시수)\n</p>\n<p>\n  solid food staring date (이유일) number of pigs for solid food (이유두수)\n</p>\n","import { Component, OnInit } from '@angular/core';\nimport { PigsService } from '../pigs.service';\nimport { Observable } from 'rxjs';\nimport { IPig } from '../pig.model';\n\n@Component({\n  selector: 'app-pig-list',\n  templateUrl: './pig-list.component.html',\n  styleUrls: ['./pig-list.component.scss']\n})\nexport class PigListComponent implements OnInit {\n  public pigs$: Observable<IPig[]>;\n  constructor(private pigsService: PigsService) { }\n\n  public ngOnInit(): void {\n    this.pigs$ = this.pigsService.getPigs();\n  }\n}\n","<div class=\"search\">\n  <mat-form-field appearance=\"outline\" class=\"text\">\n    <mat-label>Search pig</mat-label>\n    <input matInput placeholder=\"Search pig\" />\n    <mat-icon matSuffix aria-hidden=\"true\">search</mat-icon>\n  </mat-form-field>\n  <mat-form-field appearance=\"outline\">\n    <mat-select name=\"status\">\n      <mat-option value=\"all\">전체</mat-option>\n      <mat-option value=\"alive\">보유모돈</mat-option>\n      <mat-option value=\"pending_fertilization\">후보돈</mat-option>\n      <mat-option value=\"pregnant\">임신돈</mat-option>\n      <mat-option value=\"breast_feeding\">포유돈</mat-option>\n      <mat-option value=\"대리모돈\">대리모돈</mat-option>\n      <mat-option value=\"solid_food_feeding\">이유모돈</mat-option>\n      <mat-option value=\"재발돈\">재발돈</mat-option>\n      <mat-option value=\"miscariage\">유산돈</mat-option>\n      <mat-option value=\"dead\">도폐사돈</mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n<mat-list>\n  <ng-container *ngFor=\"let pig of pigs$ | async\">\n    <mat-list-item [routerLink]=\"['../detail', pig.id]\" class=\"item\">\n      <div mat-line>{{ pig.id }} {{ pig.gender }}</div>\n      <div mat-line>{{ pig.birth | date }}</div>\n    </mat-list-item>\n    <mat-divider></mat-divider>\n  </ng-container>\n</mat-list>\n","export enum Gender {\n  male = 'male',\n  female = 'female'\n}\n\nexport interface IPig {\n  id: string;\n  birth: Date;\n  gender: Gender;\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-pigs',\n  templateUrl: './pigs.component.html',\n  styleUrls: ['./pigs.component.scss'],\n})\nexport class PigsComponent {}\n","<h1>Pigs</h1>\n<router-outlet></router-outlet>","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSelectModule } from '@angular/material/select';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PigDetailComponent } from './detail/pig-detail.component';\nimport { PigListComponent } from './list/pig-list.component';\nimport { PigsComponent } from './pigs.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PigsComponent,\n    children: [\n      { path: 'list', component: PigListComponent },\n      { path: 'detail/:id', component: PigDetailComponent },\n      { path: '', redirectTo: 'list' },\n    ],\n  },\n];\n\n@NgModule({\n  declarations: [PigDetailComponent, PigListComponent, PigsComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    MatListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule\n  ],\n})\nexport class PigsModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { IPig, Gender } from './pig.model';\n\n// export interface\n@Injectable({\n  providedIn: 'root',\n})\nexport class PigsService {\n  private pigs: IPig[] = [\n    { id: '112', birth: new Date(), gender: Gender.female },\n    { id: '2', birth: new Date(), gender: Gender.male },\n    { id: '3', birth: new Date(), gender: Gender.female },\n    { id: '4', birth: new Date(), gender: Gender.female },\n    { id: '5', birth: new Date(), gender: Gender.female },\n  ];\n\n  getPigs(): Observable<IPig[]> {\n    return of(this.pigs);\n  }\n\n  getPig(id: string): Observable<IPig> {\n    const pig = this.pigs.find((p) => p.id === id);\n    return pig ? of(pig) : throwError('404');\n  }\n}\n"]}